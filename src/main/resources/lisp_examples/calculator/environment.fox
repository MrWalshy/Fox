defun(operation, (symbol, args) -> {
  var(total, args[0])
  var(i, 1)
  
  // println("=== " + symbol)
  while(i < len(args), {
    //println("Doing " + args[0] + symbol + args[i])
    match symbol {
      "+" => total <- total + args[i]
      "-" => total <- total - args[i]
      "/" => total <- total / args[i]
      "*" => total <- total * args[i]
      "max" => {
        total < args[i] ? 
          total <- args[i] : null
      }
      "min" => {
        total > args[i] ? 
          total <- args[i] : null
      }
    }
    i <- i+1
  })
  // println("The total of was: " + total)
  total
})

defun(standardEnvironment, (addOns) -> {
  var(builtIns, [
    ["true", true],
    ["false", false],
    ["+", '(args) -> operation("+", args)],
    ["-", '(args) -> operation("-", args)],
    ["/", '(args) -> operation("/", args)],
    ["*", '(args) -> operation("*", args)],
    ["max", '(args) -> operation("max", args)],
    ["min", '(args) -> operation("min", args)]
  ])
  addOns ? merge(builtIns, addOns) : builtIns
})

defun(getSymbol, (lexeme, env) -> {
  var(i, 0)
  var(symbol)
    
  while(i < len(env), {
    env[i][0] == lexeme ? {
      symbol <- env[i][1]
      break()
    } : null
    i <- i+1
  })
  symbol
})